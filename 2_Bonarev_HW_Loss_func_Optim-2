{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNv1lwVhd4mkYRnwVBXtjl6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**Задание**\n","\n","**Цель:** изучить применение методов оптимизации для решения задачи классификации\n","\n","**Описание задания:**\n","\n","В домашнем задании необходимо применить полученные знания в теории оптимизации и машинном обучении для реализации логистической регрессии.\n","\n","**Этапы работы:**\n","\n","1. Загрузите данные. Используйте датасет с ирисами. Его можно загрузить непосредственно из библиотеки Sklearn. В данных оставьте только 2 класса: Iris Versicolor, Iris Virginica.\n","2. Самостоятельно реализуйте логистическую регрессию, без использования метода LogisticRegression из библиотеки. Можете использовать библиотеки pandas, numpy, math для реализации. Оформите в виде функции. *Оформите в виде класса с методами.\n","3. Реализуйте метод градиентного спуска. Обучите логистическую регрессию этим методом. Выберете и посчитайте метрику качества. Метрика должна быть одинакова для всех пунктов домашнего задания. Для упрощения сравнения выберете только одну метрику.\n","4. Повторите п. 3 для метода скользящего среднего (Root Mean Square Propagation, RMSProp).\n","5. Повторите п. 3 для ускоренного по Нестерову метода адаптивной оценки моментов (Nesterov–accelerated Adaptive Moment Estimation, Nadam).\n","6. Сравните значение метрик для реализованных методов оптимизации. Можно оформить в виде таблицы вида |метод|метрика|время работы| (время работы опционально). Напишите вывод.\n","\n","Для лучшего понимания темы и упрощения реализации можете обратиться к статье.\n","\n","Для получение зачета по этому домашнему заданию, минимально, должно быть реализовано обучение логистической регрессии и градиентный спуск.\n","\n","**Результат:** получены навыки реализации методов оптимизации в задаче бинарной классификации. Пройденные методы оптимизации используются и в нейросетях."],"metadata":{"id":"ZQWgtHWhghxZ"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np"],"metadata":{"id":"8GFaDe8ahFQR","executionInfo":{"status":"ok","timestamp":1716480942431,"user_tz":-180,"elapsed":264,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["#Загружаем датасет с ирисами.\n","from sklearn.datasets import load_iris\n","data_iris = load_iris()"],"metadata":{"id":"CwadEGq5bkNE","executionInfo":{"status":"ok","timestamp":1716480943629,"user_tz":-180,"elapsed":1,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["print(f'Название переменных:{data_iris.feature_names}')\n","\n","print(f'Данные:{data_iris.data[:10]}')\n","\n","print(f'Название классов:{data_iris.target_names}')\n","print(f'Значения классов:{data_iris.target}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M8rqH7zpTMQs","executionInfo":{"status":"ok","timestamp":1716480946366,"user_tz":-180,"elapsed":821,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}},"outputId":"a343ecf2-d64b-40ea-c54f-d4a9b12e5cd1"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["Название переменных:['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n","Данные:[[5.1 3.5 1.4 0.2]\n"," [4.9 3.  1.4 0.2]\n"," [4.7 3.2 1.3 0.2]\n"," [4.6 3.1 1.5 0.2]\n"," [5.  3.6 1.4 0.2]\n"," [5.4 3.9 1.7 0.4]\n"," [4.6 3.4 1.4 0.3]\n"," [5.  3.4 1.5 0.2]\n"," [4.4 2.9 1.4 0.2]\n"," [4.9 3.1 1.5 0.1]]\n","Название классов:['setosa' 'versicolor' 'virginica']\n","Значения классов:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2]\n"]}]},{"cell_type":"code","source":["#Создадим DataFrame\n","iris_frame = pd.DataFrame(data_iris.data)\n","\n","# Делаем имена колонок такие же, как имена переменных\n","iris_frame.columns = data_iris.feature_names\n","\n","# Добавляем столбец с целевой переменной\n","iris_frame['target'] = data_iris.target\n","\n","# Для наглядности добавляем столбец с сортами\n","iris_frame['name'] = iris_frame.target.apply(lambda x : data_iris.target_names[x])\n","\n","# Смотрим, что получилось:\n","iris_frame"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"PEtgIYyWVPXf","executionInfo":{"status":"ok","timestamp":1716480949545,"user_tz":-180,"elapsed":302,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}},"outputId":"e73c230e-2cc1-4dc0-86ce-7a365059fcd7"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n","0                  5.1               3.5                1.4               0.2   \n","1                  4.9               3.0                1.4               0.2   \n","2                  4.7               3.2                1.3               0.2   \n","3                  4.6               3.1                1.5               0.2   \n","4                  5.0               3.6                1.4               0.2   \n","..                 ...               ...                ...               ...   \n","145                6.7               3.0                5.2               2.3   \n","146                6.3               2.5                5.0               1.9   \n","147                6.5               3.0                5.2               2.0   \n","148                6.2               3.4                5.4               2.3   \n","149                5.9               3.0                5.1               1.8   \n","\n","     target       name  \n","0         0     setosa  \n","1         0     setosa  \n","2         0     setosa  \n","3         0     setosa  \n","4         0     setosa  \n","..      ...        ...  \n","145       2  virginica  \n","146       2  virginica  \n","147       2  virginica  \n","148       2  virginica  \n","149       2  virginica  \n","\n","[150 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-3ad32715-9a6c-4066-b9f3-120f4c055940\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>target</th>\n","      <th>name</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>6.7</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.3</td>\n","      <td>2</td>\n","      <td>virginica</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>6.3</td>\n","      <td>2.5</td>\n","      <td>5.0</td>\n","      <td>1.9</td>\n","      <td>2</td>\n","      <td>virginica</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>6.5</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.0</td>\n","      <td>2</td>\n","      <td>virginica</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>6.2</td>\n","      <td>3.4</td>\n","      <td>5.4</td>\n","      <td>2.3</td>\n","      <td>2</td>\n","      <td>virginica</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>5.9</td>\n","      <td>3.0</td>\n","      <td>5.1</td>\n","      <td>1.8</td>\n","      <td>2</td>\n","      <td>virginica</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>150 rows × 6 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ad32715-9a6c-4066-b9f3-120f4c055940')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3ad32715-9a6c-4066-b9f3-120f4c055940 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3ad32715-9a6c-4066-b9f3-120f4c055940');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d8801a93-7b28-4642-8c28-1a564e4ce45a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d8801a93-7b28-4642-8c28-1a564e4ce45a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d8801a93-7b28-4642-8c28-1a564e4ce45a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"iris_frame","summary":"{\n  \"name\": \"iris_frame\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.828066127977863,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4358662849366982,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7652982332594662,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7622376689603465,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"setosa\",\n          \"versicolor\",\n          \"virginica\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["#Оставляем 2 класса: Iris Versicolor, Iris Virginica.\n","iris_frame_for_work = iris_frame.loc[iris_frame['name'].isin(['versicolor', 'virginica'])].reset_index(drop=True)"],"metadata":{"id":"Ythlsa-xSKn6","executionInfo":{"status":"ok","timestamp":1716480952689,"user_tz":-180,"elapsed":266,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["#приведем значения целевой переменной в бинарный вид (0-1)\n","target_map = {1: 0, 2: 1}\n","iris_frame_for_work['target'] = iris_frame_for_work['target'].map(target_map)"],"metadata":{"id":"_zILpJ1NGQb_","executionInfo":{"status":"ok","timestamp":1716480954248,"user_tz":-180,"elapsed":305,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["iris_frame_for_work.info()\n","iris_frame_for_work.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":425},"id":"2fTNaVu8X6rI","executionInfo":{"status":"ok","timestamp":1716480956301,"user_tz":-180,"elapsed":366,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}},"outputId":"9615d551-df9b-4e20-e096-d5bcc5aca136"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 100 entries, 0 to 99\n","Data columns (total 6 columns):\n"," #   Column             Non-Null Count  Dtype  \n","---  ------             --------------  -----  \n"," 0   sepal length (cm)  100 non-null    float64\n"," 1   sepal width (cm)   100 non-null    float64\n"," 2   petal length (cm)  100 non-null    float64\n"," 3   petal width (cm)   100 non-null    float64\n"," 4   target             100 non-null    int64  \n"," 5   name               100 non-null    object \n","dtypes: float64(4), int64(1), object(1)\n","memory usage: 4.8+ KB\n"]},{"output_type":"execute_result","data":{"text/plain":["   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n","0                7.0               3.2                4.7               1.4   \n","1                6.4               3.2                4.5               1.5   \n","2                6.9               3.1                4.9               1.5   \n","3                5.5               2.3                4.0               1.3   \n","4                6.5               2.8                4.6               1.5   \n","\n","   target        name  \n","0       0  versicolor  \n","1       0  versicolor  \n","2       0  versicolor  \n","3       0  versicolor  \n","4       0  versicolor  "],"text/html":["\n","  <div id=\"df-03afdd02-40b0-4488-bbc2-46fb526e4bd7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>target</th>\n","      <th>name</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>7.0</td>\n","      <td>3.2</td>\n","      <td>4.7</td>\n","      <td>1.4</td>\n","      <td>0</td>\n","      <td>versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6.4</td>\n","      <td>3.2</td>\n","      <td>4.5</td>\n","      <td>1.5</td>\n","      <td>0</td>\n","      <td>versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6.9</td>\n","      <td>3.1</td>\n","      <td>4.9</td>\n","      <td>1.5</td>\n","      <td>0</td>\n","      <td>versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5.5</td>\n","      <td>2.3</td>\n","      <td>4.0</td>\n","      <td>1.3</td>\n","      <td>0</td>\n","      <td>versicolor</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6.5</td>\n","      <td>2.8</td>\n","      <td>4.6</td>\n","      <td>1.5</td>\n","      <td>0</td>\n","      <td>versicolor</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03afdd02-40b0-4488-bbc2-46fb526e4bd7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-03afdd02-40b0-4488-bbc2-46fb526e4bd7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-03afdd02-40b0-4488-bbc2-46fb526e4bd7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4ddb55e8-788f-4b93-be9c-1f4995c2cf13\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4ddb55e8-788f-4b93-be9c-1f4995c2cf13')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4ddb55e8-788f-4b93-be9c-1f4995c2cf13 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"iris_frame_for_work","summary":"{\n  \"name\": \"iris_frame_for_work\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6628344400749671,\n        \"min\": 4.9,\n        \"max\": 7.9,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          5.2,\n          7.7,\n          6.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3327510064946947,\n        \"min\": 2.0,\n        \"max\": 3.8,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          3.2,\n          3.1,\n          2.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8255784626428903,\n        \"min\": 3.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          3.8,\n          6.0,\n          5.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.42476850498628405,\n        \"min\": 1.0,\n        \"max\": 2.5,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          1.4,\n          1.5,\n          1.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"virginica\",\n          \"versicolor\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["#проверим сбалансированность классов\n","iris_frame_for_work['target'].value_counts()\n","\n","#Классы сбалансированы"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nRzeJPt4z52z","executionInfo":{"status":"ok","timestamp":1716480961400,"user_tz":-180,"elapsed":4,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}},"outputId":"81bf8ca9-a299-42a3-b41a-30f12c0d5c73"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["target\n","0    50\n","1    50\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":54}]},{"cell_type":"markdown","source":["**Реализация логистической регрессии**"],"metadata":{"id":"omMTFdiXYdHQ"}},{"cell_type":"code","source":["#Градиентный спуск\n","\n","def sigmoid(x):\n","    return 1/(1+np.exp(-x))\n","\n","\n","class LogisticRegressionGrad():\n","\n","    '''Базовый метод со значениями по умолчанию'''\n","    def __init__(self, lr=0.001, n_iters=1000):\n","        self.lr = lr #скорость обучения\n","        self.n_iters = n_iters #количество итераций\n","        self.weights = None #веса (коэффициенты перед параметрами)\n","        self.bias = None #коэффициент смещения\n","\n","    '''Метод для обучения модели'''\n","    def predict_grad(self, X, y):\n","        n_samples, n_features = X.shape\n","        self.weights = np.zeros(n_features)\n","        self.bias = 0\n","\n","        for _ in range(self.n_iters):\n","            linear_pred = np.dot(X, self.weights) + self.bias #линейная модель\n","            predictions = sigmoid(linear_pred) #линейная модель, пропущенная через сигмоиду\n","\n","            #Считаем градиенты для матриц с весами/смещениями\n","            dw = (1/n_samples) * np.dot(X.T, (predictions - y))\n","            db = (1/n_samples) * np.sum(predictions - y)\n","\n","            #Обновляем коэффициенты (с учетом скорости обучения)\n","            self.weights = self.weights - self.lr*dw\n","            self.bias = self.bias - self.lr*db\n","\n","    '''Метод для предсказания класса на основании модели'''\n","    def predict(self, X):\n","        linear_pred = np.dot(X, self.weights) + self.bias\n","        y_pred = sigmoid(linear_pred)\n","        class_pred = [0 if y<=0.5 else 1 for y in y_pred]\n","        return class_pred"],"metadata":{"id":"2V9XHzjuEBXM","executionInfo":{"status":"ok","timestamp":1716480988169,"user_tz":-180,"elapsed":1372,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["#Зададим матрицу признаков и целевой переменной\n","X = iris_frame_for_work[['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']]\n","y = iris_frame_for_work['target']"],"metadata":{"id":"QoFtA3wHEBZn","executionInfo":{"status":"ok","timestamp":1716480998384,"user_tz":-180,"elapsed":288,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"bN5SgkZwEBdG","executionInfo":{"status":"ok","timestamp":1716481000500,"user_tz":-180,"elapsed":240,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["#обучаем модель, используя метод класса\n","model = LogisticRegressionGrad()\n","model.predict_grad(X_train, y_train)\n","y_pred = model.predict(X_test)"],"metadata":{"id":"BUPR0bw1WrOv","executionInfo":{"status":"ok","timestamp":1716481003452,"user_tz":-180,"elapsed":1264,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["#считаем точность\n","def accuracy(y_pred, y_test):\n","    return np.sum(y_pred==y_test)/len(y_test)\n","\n","acc_grad = accuracy(y_pred, y_test)\n","print(acc_grad)"],"metadata":{"id":"pmj2_iMk2bx8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716481005549,"user_tz":-180,"elapsed":332,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}},"outputId":"74ea77f8-4128-4b11-be65-3b7892526cf5"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["0.4\n"]}]},{"cell_type":"code","source":["#Используем метод скользящего среднего (Root Mean Square Propagation, RMSProp).\n","\n","def sigmoid(x):\n","    return 1/(1+np.exp(-x))\n","\n","\n","class LogisticRegressionRMSProp():\n","\n","    '''Базовый метод со значениями по умолчанию'''\n","    def __init__(self, lr=0.001, gamma=0.9, epsilon=0.00001, n_iters=1000):\n","        self.lr = lr\n","        self.n_iters = n_iters\n","        self.gamma = gamma #коэффициент сохранения\n","        self.epsilon = epsilon #малая константа, чтобы на первом шаге рпи одновлении коэффициентов не получить в знаменателе ноль\n","        self.weights = None\n","        self.bias = None\n","\n","    '''Метод для обучения модели'''\n","    def predict_rmsprop(self, X, y):\n","        n_samples, n_features = X.shape\n","        self.weights = np.zeros(n_features)\n","        self.bias = 0\n","        e1 = 0\n","        e2 = 0\n","\n","        for _ in range(self.n_iters):\n","            linear_pred = np.dot(X, self.weights) + self.bias #линейная модель\n","            predictions = sigmoid(linear_pred) #линейная модель, пропущенная через сигмоиду\n","\n","            #Считаем градиенты для матриц с весами/смещениями\n","            dw = (1/n_samples) * np.dot(X.T, (predictions - y))\n","            db = (1/n_samples) * np.sum(predictions - y)\n","\n","            #Расчет экспоненциально взвешенных средних производных\n","            ew = self.gamma * e1 + (1 - self.gamma) * dw**2\n","            eb = self.gamma * e2 + (1 - self.gamma) * db**2\n","\n","            #Обновляем коэффициенты\n","            self.weights = self.weights - self.lr*dw/(np.sqrt(ew+self.epsilon))\n","            self.bias = self.bias - self.lr*db/(np.sqrt(eb+self.epsilon))\n","\n","    '''Метод для предсказания класса на основании модели'''\n","    def predict(self, X):\n","        linear_pred = np.dot(X, self.weights) + self.bias\n","        y_pred = sigmoid(linear_pred)\n","        class_pred = [0 if y<=0.5 else 1 for y in y_pred]\n","        return class_pred"],"metadata":{"id":"1iZK93hTxUke","executionInfo":{"status":"ok","timestamp":1716481011392,"user_tz":-180,"elapsed":285,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}}},"execution_count":60,"outputs":[]},{"cell_type":"code","source":["#обучаем модель, используя метод класса\n","model = LogisticRegressionRMSProp()\n","model.predict_rmsprop(X_train, y_train)\n","y_pred = model.predict(X_test)"],"metadata":{"id":"-qupkXtsC11b","executionInfo":{"status":"ok","timestamp":1716481015158,"user_tz":-180,"elapsed":493,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["#считаем точность\n","def accuracy(y_pred, y_test):\n","    return np.sum(y_pred==y_test)/len(y_test)\n","\n","acc_rmsprop = accuracy(y_pred, y_test)\n","print(acc_rmsprop)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"olyCYRj1DBSH","executionInfo":{"status":"ok","timestamp":1716481016417,"user_tz":-180,"elapsed":357,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}},"outputId":"1f465502-7385-418c-f1ce-98de605cf0a2"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["0.85\n"]}]},{"cell_type":"code","source":["#Используем метод адаптивной оценки моментов (Nadam).\n","def sigmoid(x):\n","    return 1/(1+np.exp(-x))\n","\n","\n","class LogisticRegressionNadam():\n","\n","    '''Базовый метод со значениями по умолчанию'''\n","    def __init__(self, lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=0.00001, n_iters=1000):\n","        self.lr = lr\n","        self.n_iters = n_iters\n","        self.beta_1 = beta_1 #Скорость затухания для оценки 1-го момента.\n","        self.beta_2 = beta_2 #Скорость затухания для оценки 2-го момента.\n","        self.epsilon = epsilon\n","\n","        self.weights = None\n","        self.bias = None\n","\n","        self.mtw = None\n","        self.vtw = None\n","        self.mtb = None\n","        self.vtb = None\n","\n","        self.t = 0\n","\n","    '''Метод для обучения модели'''\n","    def predict_nadam(self, X, y):\n","        n_samples, n_features = X.shape\n","        self.weights = np.zeros(n_features)\n","        self.bias = 0\n","\n","        self.mtw = np.zeros(n_features)\n","        self.vtw = np.zeros(n_features)\n","        self.mtb = 0\n","        self.vtb = 0\n","\n","        for _ in range(self.n_iters):\n","            linear_pred = np.dot(X, self.weights) + self.bias #линейная модель\n","            predictions = sigmoid(linear_pred) #линейная модель, пропущенная через сигмоиду\n","\n","            #Считаем градиенты для матриц с весами/смещениями\n","            dw = (1/n_samples) * np.dot(X.T, (predictions - y))\n","            db = (1/n_samples) * np.sum(predictions - y)\n","\n","            self.mtw = self.beta_1*self.mtw + (1-self.beta_1)*dw\n","            self.vtw = self.beta_2*self.vtw + (1-self.beta_2)*np.power(dw,2)\n","            self.mtb = self.beta_1*self.mtb + (1-self.beta_1)*db\n","            self.vtb = self.beta_2*self.vtb + (1-self.beta_2)*np.power(db,2)\n","\n","            self.t += 1\n","\n","            m_w = self.mtw / (1 - self.beta_1**self.t)\n","            v_w = self.vtw / (1 - self.beta_2**self.t)\n","            m_b = self.mtb / (1 - self.beta_1**self.t)\n","            v_b = self.vtb / (1 - self.beta_2**self.t)\n","\n","            #Обновляем коэффициенты\n","            self.weights = self.weights - self.lr / (np.sqrt(v_w) + self.epsilon) * (self.beta_1 * m_w + (1 - self.beta_1) * dw / (1 - self.beta_1**self.t))\n","            self.bias = self.bias - self.lr / (np.sqrt(v_b) + self.epsilon) * (self.beta_1 * m_b + (1 - self.beta_1) * db / (1 - self.beta_1**self.t))\n","\n","    '''Метод для предсказания класса на основании модели'''\n","    def predict(self, X):\n","        linear_pred = np.dot(X, self.weights) + self.bias\n","        y_pred = sigmoid(linear_pred)\n","        class_pred = [0 if y<=0.5 else 1 for y in y_pred]\n","        return class_pred"],"metadata":{"id":"qZkjqFaKfobg","executionInfo":{"status":"ok","timestamp":1716481020401,"user_tz":-180,"elapsed":313,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["#обучаем модель, используя метод класса\n","model = LogisticRegressionNadam()\n","model.predict_nadam(X_train, y_train)\n","y_pred = model.predict(X_test)"],"metadata":{"id":"VnJa9wn2GhKo","executionInfo":{"status":"ok","timestamp":1716481025624,"user_tz":-180,"elapsed":1274,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}}},"execution_count":64,"outputs":[]},{"cell_type":"code","source":["#считаем точность\n","def accuracy(y_pred, y_test):\n","    return np.sum(y_pred==y_test)/len(y_test)\n","\n","acc_nadam = accuracy(y_pred, y_test)\n","print(acc_nadam)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x63s1JyVGzJs","executionInfo":{"status":"ok","timestamp":1716481027377,"user_tz":-180,"elapsed":270,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}},"outputId":"810cfe0b-60a9-4aaa-a593-df90fe5fbac4"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["0.85\n"]}]},{"cell_type":"code","source":["#посмотрим, как модель обучается при использовании готового алгоритма\n","import sklearn.metrics\n","from sklearn.linear_model import LogisticRegression\n","\n","model1 = LogisticRegression()\n","model1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"Oosc6l3ZI1Y9","executionInfo":{"status":"ok","timestamp":1716481033516,"user_tz":-180,"elapsed":260,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}},"outputId":"8bd0a114-53fc-4432-d311-ee842fb69d5f"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"],"text/html":["<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["model1.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"mH7HX8xNJJNO","executionInfo":{"status":"ok","timestamp":1716481045799,"user_tz":-180,"elapsed":342,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}},"outputId":"881b7f9e-02bc-4ad0-c4ae-6957bfb1c171"},"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"],"text/html":["<style>#sk-container-id-9 {color: black;background-color: white;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["acc = sklearn.metrics.accuracy_score(y_test, y_pred)\n","acc"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HUdQ1irPJNsz","executionInfo":{"status":"ok","timestamp":1716481049084,"user_tz":-180,"elapsed":343,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}},"outputId":"1e0de368-ad66-4c73-998a-e2240dc03e3b"},"execution_count":68,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.85"]},"metadata":{},"execution_count":68}]},{"cell_type":"code","source":["conclusion_df = pd.DataFrame({'Method': ['Gradient_descent', 'RMSProp', 'Nadam', 'from_sklearn'],\n","                              'accuracy': [acc_grad, acc_rmsprop, acc_nadam, acc]})\n","conclusion_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":173},"id":"GgeNl8TUJKys","executionInfo":{"status":"ok","timestamp":1716481067928,"user_tz":-180,"elapsed":263,"user":{"displayName":"Павел Бонарев","userId":"00757486208768521502"}},"outputId":"66665f6e-6655-4d7f-9298-ed9e8eb0fc22"},"execution_count":69,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Method  accuracy\n","0  Gradient_descent      0.40\n","1           RMSProp      0.85\n","2             Nadam      0.85\n","3      from_sklearn      0.85"],"text/html":["\n","  <div id=\"df-1bd258db-d40c-4f44-bf37-cb4c92fd2355\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Method</th>\n","      <th>accuracy</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Gradient_descent</td>\n","      <td>0.40</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>RMSProp</td>\n","      <td>0.85</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Nadam</td>\n","      <td>0.85</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>from_sklearn</td>\n","      <td>0.85</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1bd258db-d40c-4f44-bf37-cb4c92fd2355')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1bd258db-d40c-4f44-bf37-cb4c92fd2355 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1bd258db-d40c-4f44-bf37-cb4c92fd2355');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9adbb975-bb3c-4991-9fb7-61e8c03693db\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9adbb975-bb3c-4991-9fb7-61e8c03693db')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9adbb975-bb3c-4991-9fb7-61e8c03693db button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"conclusion_df","summary":"{\n  \"name\": \"conclusion_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Method\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"RMSProp\",\n          \"from_sklearn\",\n          \"Gradient_descent\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22499999999999995,\n        \"min\": 0.4,\n        \"max\": 0.85,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.85,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":69}]},{"cell_type":"markdown","source":["**Выводы**\n","\n","Наихудший результат по метрике accuracy (0.4) показал классический градиентный спуск (в самостоятельной реализации).\n","\n","Использование методов RMSProp, Nadam помогло увеличить качество модели чуть больше, чем в 2 раза (методы показали одинаковый результат - 0.85).\n","Такой же результат показала готовая логистическая модель из sklearn.\n","\n","Таким образом, использование усовершенствованных методов оптимизации позволяет более качественно обучать модель и получать более высокие метрики качества."],"metadata":{"id":"0V8FNyJ-Nnzf"}}]}